name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Debug Secrets
        run: |
          echo "Checking for secret presence (not values):"
          echo "FIREBASE_API_KEY exists: ${{ secrets.FIREBASE_API_KEY != '' }}"
          echo "FIREBASE_AUTH_DOMAIN exists: ${{ secrets.FIREBASE_AUTH_DOMAIN != '' }}"
          echo "FIREBASE_PROJECT_ID exists: ${{ secrets.FIREBASE_PROJECT_ID != '' }}"
          echo "TWITCH_CLIENT_ID exists: ${{ secrets.TWITCH_CLIENT_ID != '' }}"

      - name: Create firebase-config.js
        run: |
          # Create firebase-config.js directly
          cat > js/firebase-config.js << 'EOF'
          // Production Firebase Configuration
          function initializeFirebase() {
              try {
                  // Production Firebase configuration
                  const firebaseConfig = {
                      apiKey: "${{ secrets.FIREBASE_API_KEY }}",
                      authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
                      projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
                      storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
                      messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
                      appId: "${{ secrets.FIREBASE_APP_ID }}",
                      measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
                  };
                  
                  console.log('Initializing Firebase with project ID:', firebaseConfig.projectId);
                  
                  // Initialize Firebase
                  firebase.initializeApp(firebaseConfig);
                  
                  // Set up services
                  window.db = firebase.firestore();
                  window.auth = firebase.auth();
                  firebase.analytics();
                  
                  console.log('Firebase initialized successfully');
              } catch (error) {
                  console.error('Firebase initialization error:', error);
              }
          }

          // Initialize Firebase when the script loads
          initializeFirebase();
          EOF

      - name: Create auth.js
        run: |
          # Create auth.js directly
          cat > js/auth.js << 'EOF'
          // js/auth.js - Authentication Manager
          class AuthManager {
              constructor() {
                  this.currentUser = null;
                  
                  // Dynamically determine base URL
                  const baseUrl = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' 
                      ? 'http://localhost:8080'
                      : 'https://brovar64.github.io/stream-bingo.github.io';
                      
                  // Use index.html as the redirect URI
                  this.REDIRECT_URI = "${{ secrets.TWITCH_REDIRECT_URI }}" || `${baseUrl}/index.html`;
                  
                  console.log('Auth Manager initialized');
                  console.log('Redirect URI:', this.REDIRECT_URI);
                  
                  this.loadUserFromStorage();
              }

              // Check for authentication callback from Twitch
              checkForAuthCallback() {
                  const hash = window.location.hash;
                  if (hash && hash.includes('access_token=')) {
                      console.log('Found access token in URL hash');
                      // Extract access token
                      const params = new URLSearchParams(hash.substring(1));
                      const accessToken = params.get('access_token');
                      
                      if (accessToken) {
                          console.log('Successfully extracted access token');
                          // TODO: In a production app, validate the token with Twitch
                          // For now, just store it and create a user
                          this.currentUser = {
                              username: 'TwitchUser',
                              avatar: null,
                              token: accessToken,
                              authMethod: 'twitch'
                          };
                          
                          this.saveUserToStorage();
                          
                          // Set flag to show dashboard after load
                          window.showDashboardAfterLoad = true;
                          
                          // Remove hash from URL
                          window.history.replaceState(null, null, window.location.pathname);
                          
                          return true;
                      }
                  }
                  return false;
              }

              loadUserFromStorage() {
                  const userData = localStorage.getItem('streamBingoUser');
                  if (userData) {
                      try {
                          this.currentUser = JSON.parse(userData);
                          console.log('User loaded from storage:', this.currentUser.username);
                          return true;
                      } catch (e) {
                          console.error('Error parsing user data from storage:', e);
                          return false;
                      }
                  }
                  return false;
              }
              
              saveUserToStorage() {
                  if (this.currentUser) {
                      localStorage.setItem('streamBingoUser', JSON.stringify(this.currentUser));
                      console.log('User saved to storage:', this.currentUser.username);
                      return true;
                  }
                  return false;
              }
              
              loginWithTwitch() {
                  // Redirect to Twitch OAuth flow
                  // In a production app, you should use a proper OAuth flow with state parameter
                  // This is a simplified example for demonstration purposes
                  const scope = 'user:read:email';
                  const clientId = "${{ secrets.TWITCH_CLIENT_ID }}";
                  
                  const authUrl = `https://id.twitch.tv/oauth2/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(this.REDIRECT_URI)}&response_type=token&scope=${scope}`;
                  
                  console.log('Redirecting to Twitch auth URL:', authUrl);
                  window.location.href = authUrl;
              }
              
              loginWithTestAccount(username) {
                  this.currentUser = {
                      username: username || 'TestUser',
                      avatar: null,
                      authMethod: 'test'
                  };
                  
                  this.saveUserToStorage();
                  console.log('Logged in with test account:', username);
                  return true;
              }
              
              logout() {
                  localStorage.removeItem('streamBingoUser');
                  this.currentUser = null;
                  console.log('User logged out');
                  return true;
              }
              
              isLoggedIn() {
                  return !!this.currentUser;
              }
              
              getUsername() {
                  return this.currentUser ? this.currentUser.username : null;
              }
              
              getProfileImage() {
                  return this.currentUser ? this.currentUser.avatar : null;
              }
          }

          // Export globally
          window.authManager = new AuthManager();
          EOF

      - name: Display Updated Files (for debugging)
        run: |
          echo "=== First 10 lines of firebase-config.js ==="
          head -n 10 js/firebase-config.js
          echo "=== First few lines with credentials (sensitive parts masked) ==="
          grep -A5 "firebaseConfig" js/firebase-config.js | sed 's/\(apiKey: \)"[^"]*"/\1"***"/g'
          echo "=========================================="

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: .
          branch: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}
